// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/xcmetrics/v1/xcmetrics.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Spotify_Xcmetrics_Build {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var identifier: String {
    get {return _storage._identifier}
    set {_uniqueStorage()._identifier = newValue}
  }

  public var projectName: String {
    get {return _storage._projectName}
    set {_uniqueStorage()._projectName = newValue}
  }

  public var machineName: String {
    get {return _storage._machineName}
    set {_uniqueStorage()._machineName = newValue}
  }

  public var schema: String {
    get {return _storage._schema}
    set {_uniqueStorage()._schema = newValue}
  }

  public var startTimestamp: Int64 {
    get {return _storage._startTimestamp}
    set {_uniqueStorage()._startTimestamp = newValue}
  }

  public var endTimestamp: Int64 {
    get {return _storage._endTimestamp}
    set {_uniqueStorage()._endTimestamp = newValue}
  }

  public var startTimestampMicroseconds: Double {
    get {return _storage._startTimestampMicroseconds}
    set {_uniqueStorage()._startTimestampMicroseconds = newValue}
  }

  public var endTimestampMicroseconds: Double {
    get {return _storage._endTimestampMicroseconds}
    set {_uniqueStorage()._endTimestampMicroseconds = newValue}
  }

  public var duration: Double {
    get {return _storage._duration}
    set {_uniqueStorage()._duration = newValue}
  }

  public var buildStatus: String {
    get {return _storage._buildStatus}
    set {_uniqueStorage()._buildStatus = newValue}
  }

  public var warningCount: Int32 {
    get {return _storage._warningCount}
    set {_uniqueStorage()._warningCount = newValue}
  }

  public var errorCount: Int32 {
    get {return _storage._errorCount}
    set {_uniqueStorage()._errorCount = newValue}
  }

  public var tag: String {
    get {return _storage._tag}
    set {_uniqueStorage()._tag = newValue}
  }

  public var isCi: Bool {
    get {return _storage._isCi}
    set {_uniqueStorage()._isCi = newValue}
  }

  public var userid: String {
    get {return _storage._userid}
    set {_uniqueStorage()._userid = newValue}
  }

  public var userid256: String {
    get {return _storage._userid256}
    set {_uniqueStorage()._userid256 = newValue}
  }

  public var category: String {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var compiledCount: Int32 {
    get {return _storage._compiledCount}
    set {_uniqueStorage()._compiledCount = newValue}
  }

  public var wasSuspended: Bool {
    get {return _storage._wasSuspended}
    set {_uniqueStorage()._wasSuspended = newValue}
  }

  public var compilationEndTimestamp: Int64 {
    get {return _storage._compilationEndTimestamp}
    set {_uniqueStorage()._compilationEndTimestamp = newValue}
  }

  public var compilationEndTimestampMicroseconds: Double {
    get {return _storage._compilationEndTimestampMicroseconds}
    set {_uniqueStorage()._compilationEndTimestampMicroseconds = newValue}
  }

  public var compilationDuration: Double {
    get {return _storage._compilationDuration}
    set {_uniqueStorage()._compilationDuration = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Spotify_Xcmetrics_TargetBuild {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var identifier: String = String()

  public var buildIdentifier: String = String()

  public var name: String = String()

  public var startTimestamp: Int64 = 0

  public var endTimestamp: Int64 = 0

  public var startTimestampMicroseconds: Double = 0

  public var endTimestampMicroseconds: Double = 0

  public var duration: Double = 0

  public var warningCount: Int32 = 0

  public var errorCount: Int32 = 0

  public var fetchedFromCache: Bool = false

  public var category: String = String()

  public var compiledCount: Int32 = 0

  public var compilationEndTimestamp: Int64 = 0

  public var compilationEndTimestampMicroseconds: Double = 0

  public var compilationDuration: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Spotify_Xcmetrics_StepBuild {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var identifier: String = String()

  public var buildIdentifier: String = String()

  public var targetIdentifier: String = String()

  public var title: String = String()

  public var signature: String = String()

  public var type: String = String()

  public var architecture: String = String()

  public var documentURL: String = String()

  public var startTimestamp: Int64 = 0

  public var endTimestamp: Int64 = 0

  public var startTimestampMicroseconds: Double = 0

  public var endTimestampMicroseconds: Double = 0

  public var duration: Double = 0

  public var warningCount: Int32 = 0

  public var errorCount: Int32 = 0

  public var fetchedFromCache: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Spotify_Xcmetrics_FunctionBuild {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var buildIdentifier: String = String()

  public var stepIdentifier: String = String()

  public var file: String = String()

  public var signature: String = String()

  public var startingLine: Int32 = 0

  public var startingColumn: Int32 = 0

  public var duration: Double = 0

  public var occurrences: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Spotify_Xcmetrics_WarningBuild {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var buildIdentifier: String = String()

  public var parentIdentifier: String = String()

  /// build, target, step
  public var parentType: String = String()

  public var type: String = String()

  public var title: String = String()

  public var documentURL: String = String()

  public var clangFlag: String = String()

  public var severity: Int32 = 0

  public var startingLine: Int32 = 0

  public var endingLine: Int32 = 0

  public var startingColumn: Int32 = 0

  public var endingColumn: Int32 = 0

  public var characterRangeStart: Int32 = 0

  public var characterRangeEnd: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Spotify_Xcmetrics_ErrorBuild {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var buildIdentifier: String = String()

  public var parentIdentifier: String = String()

  /// build, target, step
  public var parentType: String = String()

  public var type: String = String()

  public var title: String = String()

  public var documentURL: String = String()

  public var severity: Int32 = 0

  public var startingLine: Int32 = 0

  public var endingLine: Int32 = 0

  public var startingColumn: Int32 = 0

  public var endingColumn: Int32 = 0

  public var characterRangeStart: Int32 = 0

  public var characterRangeEnd: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Spotify_Xcmetrics_NoteBuild {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var buildIdentifier: String = String()

  public var parentIdentifier: String = String()

  /// build, target, step
  public var parentType: String = String()

  public var title: String = String()

  public var documentURL: String = String()

  public var severity: Int32 = 0

  public var startingLine: Int32 = 0

  public var endingLine: Int32 = 0

  public var startingColumn: Int32 = 0

  public var endingColumn: Int32 = 0

  public var characterRangeStart: Int32 = 0

  public var characterRangeEnd: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Spotify_Xcmetrics_SwiftTypeCheckBuild {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var buildIdentifier: String = String()

  public var stepIdentifier: String = String()

  public var file: String = String()

  public var startingLine: Int32 = 0

  public var startingColumn: Int32 = 0

  public var duration: Double = 0

  public var occurrences: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Spotify_Xcmetrics_BuildHost {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var buildIdentifier: String = String()

  public var hostOs: String = String()

  public var hostArchitecture: String = String()

  public var hostModel: String = String()

  public var hostOsFamily: String = String()

  public var hostOsVersion: String = String()

  public var cpuModel: String = String()

  public var cpuCount: Int32 = 0

  public var cpuSpeedGhz: Float = 0

  public var memoryTotalMb: Double = 0

  public var memoryFreeMb: Double = 0

  public var swapTotalMb: Double = 0

  public var swapFreeMb: Double = 0

  public var uptimeSeconds: Int64 = 0

  public var timezone: String = String()

  public var isVirtual: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Spotify_Xcmetrics_XcodeVersion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var buildIdentifier: String = String()

  public var version: String = String()

  public var buildNumber: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Spotify_Xcmetrics_BuildMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var buildIdentifier: String = String()

  public var metadata: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Spotify_Xcmetrics_UploadBuildMetricsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: Int32 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  public var build: Spotify_Xcmetrics_Build {
    get {return _storage._build ?? Spotify_Xcmetrics_Build()}
    set {_uniqueStorage()._build = newValue}
  }
  /// Returns true if `build` has been explicitly set.
  public var hasBuild: Bool {return _storage._build != nil}
  /// Clears the value of `build`. Subsequent reads from it will return its default value.
  public mutating func clearBuild() {_uniqueStorage()._build = nil}

  public var targets: [Spotify_Xcmetrics_TargetBuild] {
    get {return _storage._targets}
    set {_uniqueStorage()._targets = newValue}
  }

  public var steps: [Spotify_Xcmetrics_StepBuild] {
    get {return _storage._steps}
    set {_uniqueStorage()._steps = newValue}
  }

  public var functions: [Spotify_Xcmetrics_FunctionBuild] {
    get {return _storage._functions}
    set {_uniqueStorage()._functions = newValue}
  }

  public var warnings: [Spotify_Xcmetrics_WarningBuild] {
    get {return _storage._warnings}
    set {_uniqueStorage()._warnings = newValue}
  }

  public var errors: [Spotify_Xcmetrics_ErrorBuild] {
    get {return _storage._errors}
    set {_uniqueStorage()._errors = newValue}
  }

  public var notes: [Spotify_Xcmetrics_NoteBuild] {
    get {return _storage._notes}
    set {_uniqueStorage()._notes = newValue}
  }

  public var typeChecks: [Spotify_Xcmetrics_SwiftTypeCheckBuild] {
    get {return _storage._typeChecks}
    set {_uniqueStorage()._typeChecks = newValue}
  }

  public var buildHost: Spotify_Xcmetrics_BuildHost {
    get {return _storage._buildHost ?? Spotify_Xcmetrics_BuildHost()}
    set {_uniqueStorage()._buildHost = newValue}
  }
  /// Returns true if `buildHost` has been explicitly set.
  public var hasBuildHost: Bool {return _storage._buildHost != nil}
  /// Clears the value of `buildHost`. Subsequent reads from it will return its default value.
  public mutating func clearBuildHost() {_uniqueStorage()._buildHost = nil}

  public var xcodeVersion: Spotify_Xcmetrics_XcodeVersion {
    get {return _storage._xcodeVersion ?? Spotify_Xcmetrics_XcodeVersion()}
    set {_uniqueStorage()._xcodeVersion = newValue}
  }
  /// Returns true if `xcodeVersion` has been explicitly set.
  public var hasXcodeVersion: Bool {return _storage._xcodeVersion != nil}
  /// Clears the value of `xcodeVersion`. Subsequent reads from it will return its default value.
  public mutating func clearXcodeVersion() {_uniqueStorage()._xcodeVersion = nil}

  public var buildMetadata: Spotify_Xcmetrics_BuildMetadata {
    get {return _storage._buildMetadata ?? Spotify_Xcmetrics_BuildMetadata()}
    set {_uniqueStorage()._buildMetadata = newValue}
  }
  /// Returns true if `buildMetadata` has been explicitly set.
  public var hasBuildMetadata: Bool {return _storage._buildMetadata != nil}
  /// Clears the value of `buildMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearBuildMetadata() {_uniqueStorage()._buildMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Spotify_Xcmetrics_UploadBuildMetricsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "spotify.xcmetrics"

extension Spotify_Xcmetrics_Build: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Build"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "project_name"),
    3: .standard(proto: "machine_name"),
    4: .same(proto: "schema"),
    5: .standard(proto: "start_timestamp"),
    6: .standard(proto: "end_timestamp"),
    7: .standard(proto: "start_timestamp_microseconds"),
    8: .standard(proto: "end_timestamp_microseconds"),
    9: .same(proto: "duration"),
    10: .standard(proto: "build_status"),
    11: .standard(proto: "warning_count"),
    12: .standard(proto: "error_count"),
    13: .same(proto: "tag"),
    14: .standard(proto: "is_ci"),
    15: .same(proto: "userid"),
    16: .same(proto: "userid256"),
    17: .same(proto: "category"),
    18: .standard(proto: "compiled_count"),
    19: .standard(proto: "was_suspended"),
    20: .standard(proto: "compilation_end_timestamp"),
    21: .standard(proto: "compilation_end_timestamp_microseconds"),
    22: .standard(proto: "compilation_duration"),
  ]

  fileprivate class _StorageClass {
    var _identifier: String = String()
    var _projectName: String = String()
    var _machineName: String = String()
    var _schema: String = String()
    var _startTimestamp: Int64 = 0
    var _endTimestamp: Int64 = 0
    var _startTimestampMicroseconds: Double = 0
    var _endTimestampMicroseconds: Double = 0
    var _duration: Double = 0
    var _buildStatus: String = String()
    var _warningCount: Int32 = 0
    var _errorCount: Int32 = 0
    var _tag: String = String()
    var _isCi: Bool = false
    var _userid: String = String()
    var _userid256: String = String()
    var _category: String = String()
    var _compiledCount: Int32 = 0
    var _wasSuspended: Bool = false
    var _compilationEndTimestamp: Int64 = 0
    var _compilationEndTimestampMicroseconds: Double = 0
    var _compilationDuration: Double = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identifier = source._identifier
      _projectName = source._projectName
      _machineName = source._machineName
      _schema = source._schema
      _startTimestamp = source._startTimestamp
      _endTimestamp = source._endTimestamp
      _startTimestampMicroseconds = source._startTimestampMicroseconds
      _endTimestampMicroseconds = source._endTimestampMicroseconds
      _duration = source._duration
      _buildStatus = source._buildStatus
      _warningCount = source._warningCount
      _errorCount = source._errorCount
      _tag = source._tag
      _isCi = source._isCi
      _userid = source._userid
      _userid256 = source._userid256
      _category = source._category
      _compiledCount = source._compiledCount
      _wasSuspended = source._wasSuspended
      _compilationEndTimestamp = source._compilationEndTimestamp
      _compilationEndTimestampMicroseconds = source._compilationEndTimestampMicroseconds
      _compilationDuration = source._compilationDuration
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._identifier)
        case 2: try decoder.decodeSingularStringField(value: &_storage._projectName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._machineName)
        case 4: try decoder.decodeSingularStringField(value: &_storage._schema)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._startTimestamp)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._endTimestamp)
        case 7: try decoder.decodeSingularDoubleField(value: &_storage._startTimestampMicroseconds)
        case 8: try decoder.decodeSingularDoubleField(value: &_storage._endTimestampMicroseconds)
        case 9: try decoder.decodeSingularDoubleField(value: &_storage._duration)
        case 10: try decoder.decodeSingularStringField(value: &_storage._buildStatus)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._warningCount)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._errorCount)
        case 13: try decoder.decodeSingularStringField(value: &_storage._tag)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._isCi)
        case 15: try decoder.decodeSingularStringField(value: &_storage._userid)
        case 16: try decoder.decodeSingularStringField(value: &_storage._userid256)
        case 17: try decoder.decodeSingularStringField(value: &_storage._category)
        case 18: try decoder.decodeSingularInt32Field(value: &_storage._compiledCount)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._wasSuspended)
        case 20: try decoder.decodeSingularInt64Field(value: &_storage._compilationEndTimestamp)
        case 21: try decoder.decodeSingularDoubleField(value: &_storage._compilationEndTimestampMicroseconds)
        case 22: try decoder.decodeSingularDoubleField(value: &_storage._compilationDuration)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._identifier.isEmpty {
        try visitor.visitSingularStringField(value: _storage._identifier, fieldNumber: 1)
      }
      if !_storage._projectName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._projectName, fieldNumber: 2)
      }
      if !_storage._machineName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._machineName, fieldNumber: 3)
      }
      if !_storage._schema.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schema, fieldNumber: 4)
      }
      if _storage._startTimestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startTimestamp, fieldNumber: 5)
      }
      if _storage._endTimestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endTimestamp, fieldNumber: 6)
      }
      if _storage._startTimestampMicroseconds != 0 {
        try visitor.visitSingularDoubleField(value: _storage._startTimestampMicroseconds, fieldNumber: 7)
      }
      if _storage._endTimestampMicroseconds != 0 {
        try visitor.visitSingularDoubleField(value: _storage._endTimestampMicroseconds, fieldNumber: 8)
      }
      if _storage._duration != 0 {
        try visitor.visitSingularDoubleField(value: _storage._duration, fieldNumber: 9)
      }
      if !_storage._buildStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._buildStatus, fieldNumber: 10)
      }
      if _storage._warningCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._warningCount, fieldNumber: 11)
      }
      if _storage._errorCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._errorCount, fieldNumber: 12)
      }
      if !_storage._tag.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tag, fieldNumber: 13)
      }
      if _storage._isCi != false {
        try visitor.visitSingularBoolField(value: _storage._isCi, fieldNumber: 14)
      }
      if !_storage._userid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userid, fieldNumber: 15)
      }
      if !_storage._userid256.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userid256, fieldNumber: 16)
      }
      if !_storage._category.isEmpty {
        try visitor.visitSingularStringField(value: _storage._category, fieldNumber: 17)
      }
      if _storage._compiledCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._compiledCount, fieldNumber: 18)
      }
      if _storage._wasSuspended != false {
        try visitor.visitSingularBoolField(value: _storage._wasSuspended, fieldNumber: 19)
      }
      if _storage._compilationEndTimestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._compilationEndTimestamp, fieldNumber: 20)
      }
      if _storage._compilationEndTimestampMicroseconds != 0 {
        try visitor.visitSingularDoubleField(value: _storage._compilationEndTimestampMicroseconds, fieldNumber: 21)
      }
      if _storage._compilationDuration != 0 {
        try visitor.visitSingularDoubleField(value: _storage._compilationDuration, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_Build, rhs: Spotify_Xcmetrics_Build) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._projectName != rhs_storage._projectName {return false}
        if _storage._machineName != rhs_storage._machineName {return false}
        if _storage._schema != rhs_storage._schema {return false}
        if _storage._startTimestamp != rhs_storage._startTimestamp {return false}
        if _storage._endTimestamp != rhs_storage._endTimestamp {return false}
        if _storage._startTimestampMicroseconds != rhs_storage._startTimestampMicroseconds {return false}
        if _storage._endTimestampMicroseconds != rhs_storage._endTimestampMicroseconds {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._buildStatus != rhs_storage._buildStatus {return false}
        if _storage._warningCount != rhs_storage._warningCount {return false}
        if _storage._errorCount != rhs_storage._errorCount {return false}
        if _storage._tag != rhs_storage._tag {return false}
        if _storage._isCi != rhs_storage._isCi {return false}
        if _storage._userid != rhs_storage._userid {return false}
        if _storage._userid256 != rhs_storage._userid256 {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._compiledCount != rhs_storage._compiledCount {return false}
        if _storage._wasSuspended != rhs_storage._wasSuspended {return false}
        if _storage._compilationEndTimestamp != rhs_storage._compilationEndTimestamp {return false}
        if _storage._compilationEndTimestampMicroseconds != rhs_storage._compilationEndTimestampMicroseconds {return false}
        if _storage._compilationDuration != rhs_storage._compilationDuration {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Xcmetrics_TargetBuild: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TargetBuild"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "build_identifier"),
    3: .same(proto: "name"),
    4: .standard(proto: "start_timestamp"),
    5: .standard(proto: "end_timestamp"),
    6: .standard(proto: "start_timestamp_microseconds"),
    7: .standard(proto: "end_timestamp_microseconds"),
    8: .same(proto: "duration"),
    9: .standard(proto: "warning_count"),
    10: .standard(proto: "error_count"),
    11: .standard(proto: "fetched_from_cache"),
    12: .same(proto: "category"),
    13: .standard(proto: "compiled_count"),
    14: .standard(proto: "compilation_end_timestamp"),
    15: .standard(proto: "compilation_end_timestamp_microseconds"),
    16: .standard(proto: "compilation_duration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.identifier)
      case 2: try decoder.decodeSingularStringField(value: &self.buildIdentifier)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularInt64Field(value: &self.startTimestamp)
      case 5: try decoder.decodeSingularInt64Field(value: &self.endTimestamp)
      case 6: try decoder.decodeSingularDoubleField(value: &self.startTimestampMicroseconds)
      case 7: try decoder.decodeSingularDoubleField(value: &self.endTimestampMicroseconds)
      case 8: try decoder.decodeSingularDoubleField(value: &self.duration)
      case 9: try decoder.decodeSingularInt32Field(value: &self.warningCount)
      case 10: try decoder.decodeSingularInt32Field(value: &self.errorCount)
      case 11: try decoder.decodeSingularBoolField(value: &self.fetchedFromCache)
      case 12: try decoder.decodeSingularStringField(value: &self.category)
      case 13: try decoder.decodeSingularInt32Field(value: &self.compiledCount)
      case 14: try decoder.decodeSingularInt64Field(value: &self.compilationEndTimestamp)
      case 15: try decoder.decodeSingularDoubleField(value: &self.compilationEndTimestampMicroseconds)
      case 16: try decoder.decodeSingularDoubleField(value: &self.compilationDuration)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identifier.isEmpty {
      try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 1)
    }
    if !self.buildIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.buildIdentifier, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.startTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.startTimestamp, fieldNumber: 4)
    }
    if self.endTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.endTimestamp, fieldNumber: 5)
    }
    if self.startTimestampMicroseconds != 0 {
      try visitor.visitSingularDoubleField(value: self.startTimestampMicroseconds, fieldNumber: 6)
    }
    if self.endTimestampMicroseconds != 0 {
      try visitor.visitSingularDoubleField(value: self.endTimestampMicroseconds, fieldNumber: 7)
    }
    if self.duration != 0 {
      try visitor.visitSingularDoubleField(value: self.duration, fieldNumber: 8)
    }
    if self.warningCount != 0 {
      try visitor.visitSingularInt32Field(value: self.warningCount, fieldNumber: 9)
    }
    if self.errorCount != 0 {
      try visitor.visitSingularInt32Field(value: self.errorCount, fieldNumber: 10)
    }
    if self.fetchedFromCache != false {
      try visitor.visitSingularBoolField(value: self.fetchedFromCache, fieldNumber: 11)
    }
    if !self.category.isEmpty {
      try visitor.visitSingularStringField(value: self.category, fieldNumber: 12)
    }
    if self.compiledCount != 0 {
      try visitor.visitSingularInt32Field(value: self.compiledCount, fieldNumber: 13)
    }
    if self.compilationEndTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.compilationEndTimestamp, fieldNumber: 14)
    }
    if self.compilationEndTimestampMicroseconds != 0 {
      try visitor.visitSingularDoubleField(value: self.compilationEndTimestampMicroseconds, fieldNumber: 15)
    }
    if self.compilationDuration != 0 {
      try visitor.visitSingularDoubleField(value: self.compilationDuration, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_TargetBuild, rhs: Spotify_Xcmetrics_TargetBuild) -> Bool {
    if lhs.identifier != rhs.identifier {return false}
    if lhs.buildIdentifier != rhs.buildIdentifier {return false}
    if lhs.name != rhs.name {return false}
    if lhs.startTimestamp != rhs.startTimestamp {return false}
    if lhs.endTimestamp != rhs.endTimestamp {return false}
    if lhs.startTimestampMicroseconds != rhs.startTimestampMicroseconds {return false}
    if lhs.endTimestampMicroseconds != rhs.endTimestampMicroseconds {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.warningCount != rhs.warningCount {return false}
    if lhs.errorCount != rhs.errorCount {return false}
    if lhs.fetchedFromCache != rhs.fetchedFromCache {return false}
    if lhs.category != rhs.category {return false}
    if lhs.compiledCount != rhs.compiledCount {return false}
    if lhs.compilationEndTimestamp != rhs.compilationEndTimestamp {return false}
    if lhs.compilationEndTimestampMicroseconds != rhs.compilationEndTimestampMicroseconds {return false}
    if lhs.compilationDuration != rhs.compilationDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Xcmetrics_StepBuild: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StepBuild"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "build_identifier"),
    3: .standard(proto: "target_identifier"),
    4: .same(proto: "title"),
    5: .same(proto: "signature"),
    6: .same(proto: "type"),
    7: .same(proto: "architecture"),
    8: .standard(proto: "document_url"),
    9: .standard(proto: "start_timestamp"),
    10: .standard(proto: "end_timestamp"),
    11: .standard(proto: "start_timestamp_microseconds"),
    12: .standard(proto: "end_timestamp_microseconds"),
    13: .same(proto: "duration"),
    14: .standard(proto: "warning_count"),
    15: .standard(proto: "error_count"),
    16: .standard(proto: "fetched_from_cache"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.identifier)
      case 2: try decoder.decodeSingularStringField(value: &self.buildIdentifier)
      case 3: try decoder.decodeSingularStringField(value: &self.targetIdentifier)
      case 4: try decoder.decodeSingularStringField(value: &self.title)
      case 5: try decoder.decodeSingularStringField(value: &self.signature)
      case 6: try decoder.decodeSingularStringField(value: &self.type)
      case 7: try decoder.decodeSingularStringField(value: &self.architecture)
      case 8: try decoder.decodeSingularStringField(value: &self.documentURL)
      case 9: try decoder.decodeSingularInt64Field(value: &self.startTimestamp)
      case 10: try decoder.decodeSingularInt64Field(value: &self.endTimestamp)
      case 11: try decoder.decodeSingularDoubleField(value: &self.startTimestampMicroseconds)
      case 12: try decoder.decodeSingularDoubleField(value: &self.endTimestampMicroseconds)
      case 13: try decoder.decodeSingularDoubleField(value: &self.duration)
      case 14: try decoder.decodeSingularInt32Field(value: &self.warningCount)
      case 15: try decoder.decodeSingularInt32Field(value: &self.errorCount)
      case 16: try decoder.decodeSingularBoolField(value: &self.fetchedFromCache)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identifier.isEmpty {
      try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 1)
    }
    if !self.buildIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.buildIdentifier, fieldNumber: 2)
    }
    if !self.targetIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.targetIdentifier, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 5)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 6)
    }
    if !self.architecture.isEmpty {
      try visitor.visitSingularStringField(value: self.architecture, fieldNumber: 7)
    }
    if !self.documentURL.isEmpty {
      try visitor.visitSingularStringField(value: self.documentURL, fieldNumber: 8)
    }
    if self.startTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.startTimestamp, fieldNumber: 9)
    }
    if self.endTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.endTimestamp, fieldNumber: 10)
    }
    if self.startTimestampMicroseconds != 0 {
      try visitor.visitSingularDoubleField(value: self.startTimestampMicroseconds, fieldNumber: 11)
    }
    if self.endTimestampMicroseconds != 0 {
      try visitor.visitSingularDoubleField(value: self.endTimestampMicroseconds, fieldNumber: 12)
    }
    if self.duration != 0 {
      try visitor.visitSingularDoubleField(value: self.duration, fieldNumber: 13)
    }
    if self.warningCount != 0 {
      try visitor.visitSingularInt32Field(value: self.warningCount, fieldNumber: 14)
    }
    if self.errorCount != 0 {
      try visitor.visitSingularInt32Field(value: self.errorCount, fieldNumber: 15)
    }
    if self.fetchedFromCache != false {
      try visitor.visitSingularBoolField(value: self.fetchedFromCache, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_StepBuild, rhs: Spotify_Xcmetrics_StepBuild) -> Bool {
    if lhs.identifier != rhs.identifier {return false}
    if lhs.buildIdentifier != rhs.buildIdentifier {return false}
    if lhs.targetIdentifier != rhs.targetIdentifier {return false}
    if lhs.title != rhs.title {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.type != rhs.type {return false}
    if lhs.architecture != rhs.architecture {return false}
    if lhs.documentURL != rhs.documentURL {return false}
    if lhs.startTimestamp != rhs.startTimestamp {return false}
    if lhs.endTimestamp != rhs.endTimestamp {return false}
    if lhs.startTimestampMicroseconds != rhs.startTimestampMicroseconds {return false}
    if lhs.endTimestampMicroseconds != rhs.endTimestampMicroseconds {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.warningCount != rhs.warningCount {return false}
    if lhs.errorCount != rhs.errorCount {return false}
    if lhs.fetchedFromCache != rhs.fetchedFromCache {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Xcmetrics_FunctionBuild: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FunctionBuild"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "build_identifier"),
    2: .standard(proto: "step_identifier"),
    3: .same(proto: "file"),
    4: .same(proto: "signature"),
    5: .standard(proto: "starting_line"),
    6: .standard(proto: "starting_column"),
    7: .same(proto: "duration"),
    8: .same(proto: "occurrences"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.buildIdentifier)
      case 2: try decoder.decodeSingularStringField(value: &self.stepIdentifier)
      case 3: try decoder.decodeSingularStringField(value: &self.file)
      case 4: try decoder.decodeSingularStringField(value: &self.signature)
      case 5: try decoder.decodeSingularInt32Field(value: &self.startingLine)
      case 6: try decoder.decodeSingularInt32Field(value: &self.startingColumn)
      case 7: try decoder.decodeSingularDoubleField(value: &self.duration)
      case 8: try decoder.decodeSingularInt32Field(value: &self.occurrences)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.buildIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.buildIdentifier, fieldNumber: 1)
    }
    if !self.stepIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.stepIdentifier, fieldNumber: 2)
    }
    if !self.file.isEmpty {
      try visitor.visitSingularStringField(value: self.file, fieldNumber: 3)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 4)
    }
    if self.startingLine != 0 {
      try visitor.visitSingularInt32Field(value: self.startingLine, fieldNumber: 5)
    }
    if self.startingColumn != 0 {
      try visitor.visitSingularInt32Field(value: self.startingColumn, fieldNumber: 6)
    }
    if self.duration != 0 {
      try visitor.visitSingularDoubleField(value: self.duration, fieldNumber: 7)
    }
    if self.occurrences != 0 {
      try visitor.visitSingularInt32Field(value: self.occurrences, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_FunctionBuild, rhs: Spotify_Xcmetrics_FunctionBuild) -> Bool {
    if lhs.buildIdentifier != rhs.buildIdentifier {return false}
    if lhs.stepIdentifier != rhs.stepIdentifier {return false}
    if lhs.file != rhs.file {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.startingLine != rhs.startingLine {return false}
    if lhs.startingColumn != rhs.startingColumn {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.occurrences != rhs.occurrences {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Xcmetrics_WarningBuild: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WarningBuild"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "build_identifier"),
    2: .standard(proto: "parent_identifier"),
    3: .standard(proto: "parent_type"),
    4: .same(proto: "type"),
    5: .same(proto: "title"),
    6: .standard(proto: "document_url"),
    7: .standard(proto: "clang_flag"),
    8: .same(proto: "severity"),
    9: .standard(proto: "starting_line"),
    10: .standard(proto: "ending_line"),
    11: .standard(proto: "starting_column"),
    12: .standard(proto: "ending_column"),
    13: .standard(proto: "character_range_start"),
    14: .standard(proto: "character_range_end"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.buildIdentifier)
      case 2: try decoder.decodeSingularStringField(value: &self.parentIdentifier)
      case 3: try decoder.decodeSingularStringField(value: &self.parentType)
      case 4: try decoder.decodeSingularStringField(value: &self.type)
      case 5: try decoder.decodeSingularStringField(value: &self.title)
      case 6: try decoder.decodeSingularStringField(value: &self.documentURL)
      case 7: try decoder.decodeSingularStringField(value: &self.clangFlag)
      case 8: try decoder.decodeSingularInt32Field(value: &self.severity)
      case 9: try decoder.decodeSingularInt32Field(value: &self.startingLine)
      case 10: try decoder.decodeSingularInt32Field(value: &self.endingLine)
      case 11: try decoder.decodeSingularInt32Field(value: &self.startingColumn)
      case 12: try decoder.decodeSingularInt32Field(value: &self.endingColumn)
      case 13: try decoder.decodeSingularInt32Field(value: &self.characterRangeStart)
      case 14: try decoder.decodeSingularInt32Field(value: &self.characterRangeEnd)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.buildIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.buildIdentifier, fieldNumber: 1)
    }
    if !self.parentIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.parentIdentifier, fieldNumber: 2)
    }
    if !self.parentType.isEmpty {
      try visitor.visitSingularStringField(value: self.parentType, fieldNumber: 3)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 4)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 5)
    }
    if !self.documentURL.isEmpty {
      try visitor.visitSingularStringField(value: self.documentURL, fieldNumber: 6)
    }
    if !self.clangFlag.isEmpty {
      try visitor.visitSingularStringField(value: self.clangFlag, fieldNumber: 7)
    }
    if self.severity != 0 {
      try visitor.visitSingularInt32Field(value: self.severity, fieldNumber: 8)
    }
    if self.startingLine != 0 {
      try visitor.visitSingularInt32Field(value: self.startingLine, fieldNumber: 9)
    }
    if self.endingLine != 0 {
      try visitor.visitSingularInt32Field(value: self.endingLine, fieldNumber: 10)
    }
    if self.startingColumn != 0 {
      try visitor.visitSingularInt32Field(value: self.startingColumn, fieldNumber: 11)
    }
    if self.endingColumn != 0 {
      try visitor.visitSingularInt32Field(value: self.endingColumn, fieldNumber: 12)
    }
    if self.characterRangeStart != 0 {
      try visitor.visitSingularInt32Field(value: self.characterRangeStart, fieldNumber: 13)
    }
    if self.characterRangeEnd != 0 {
      try visitor.visitSingularInt32Field(value: self.characterRangeEnd, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_WarningBuild, rhs: Spotify_Xcmetrics_WarningBuild) -> Bool {
    if lhs.buildIdentifier != rhs.buildIdentifier {return false}
    if lhs.parentIdentifier != rhs.parentIdentifier {return false}
    if lhs.parentType != rhs.parentType {return false}
    if lhs.type != rhs.type {return false}
    if lhs.title != rhs.title {return false}
    if lhs.documentURL != rhs.documentURL {return false}
    if lhs.clangFlag != rhs.clangFlag {return false}
    if lhs.severity != rhs.severity {return false}
    if lhs.startingLine != rhs.startingLine {return false}
    if lhs.endingLine != rhs.endingLine {return false}
    if lhs.startingColumn != rhs.startingColumn {return false}
    if lhs.endingColumn != rhs.endingColumn {return false}
    if lhs.characterRangeStart != rhs.characterRangeStart {return false}
    if lhs.characterRangeEnd != rhs.characterRangeEnd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Xcmetrics_ErrorBuild: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrorBuild"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "build_identifier"),
    2: .standard(proto: "parent_identifier"),
    3: .standard(proto: "parent_type"),
    4: .same(proto: "type"),
    5: .same(proto: "title"),
    6: .standard(proto: "document_url"),
    7: .same(proto: "severity"),
    8: .standard(proto: "starting_line"),
    9: .standard(proto: "ending_line"),
    10: .standard(proto: "starting_column"),
    11: .standard(proto: "ending_column"),
    12: .standard(proto: "character_range_start"),
    13: .standard(proto: "character_range_end"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.buildIdentifier)
      case 2: try decoder.decodeSingularStringField(value: &self.parentIdentifier)
      case 3: try decoder.decodeSingularStringField(value: &self.parentType)
      case 4: try decoder.decodeSingularStringField(value: &self.type)
      case 5: try decoder.decodeSingularStringField(value: &self.title)
      case 6: try decoder.decodeSingularStringField(value: &self.documentURL)
      case 7: try decoder.decodeSingularInt32Field(value: &self.severity)
      case 8: try decoder.decodeSingularInt32Field(value: &self.startingLine)
      case 9: try decoder.decodeSingularInt32Field(value: &self.endingLine)
      case 10: try decoder.decodeSingularInt32Field(value: &self.startingColumn)
      case 11: try decoder.decodeSingularInt32Field(value: &self.endingColumn)
      case 12: try decoder.decodeSingularInt32Field(value: &self.characterRangeStart)
      case 13: try decoder.decodeSingularInt32Field(value: &self.characterRangeEnd)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.buildIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.buildIdentifier, fieldNumber: 1)
    }
    if !self.parentIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.parentIdentifier, fieldNumber: 2)
    }
    if !self.parentType.isEmpty {
      try visitor.visitSingularStringField(value: self.parentType, fieldNumber: 3)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 4)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 5)
    }
    if !self.documentURL.isEmpty {
      try visitor.visitSingularStringField(value: self.documentURL, fieldNumber: 6)
    }
    if self.severity != 0 {
      try visitor.visitSingularInt32Field(value: self.severity, fieldNumber: 7)
    }
    if self.startingLine != 0 {
      try visitor.visitSingularInt32Field(value: self.startingLine, fieldNumber: 8)
    }
    if self.endingLine != 0 {
      try visitor.visitSingularInt32Field(value: self.endingLine, fieldNumber: 9)
    }
    if self.startingColumn != 0 {
      try visitor.visitSingularInt32Field(value: self.startingColumn, fieldNumber: 10)
    }
    if self.endingColumn != 0 {
      try visitor.visitSingularInt32Field(value: self.endingColumn, fieldNumber: 11)
    }
    if self.characterRangeStart != 0 {
      try visitor.visitSingularInt32Field(value: self.characterRangeStart, fieldNumber: 12)
    }
    if self.characterRangeEnd != 0 {
      try visitor.visitSingularInt32Field(value: self.characterRangeEnd, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_ErrorBuild, rhs: Spotify_Xcmetrics_ErrorBuild) -> Bool {
    if lhs.buildIdentifier != rhs.buildIdentifier {return false}
    if lhs.parentIdentifier != rhs.parentIdentifier {return false}
    if lhs.parentType != rhs.parentType {return false}
    if lhs.type != rhs.type {return false}
    if lhs.title != rhs.title {return false}
    if lhs.documentURL != rhs.documentURL {return false}
    if lhs.severity != rhs.severity {return false}
    if lhs.startingLine != rhs.startingLine {return false}
    if lhs.endingLine != rhs.endingLine {return false}
    if lhs.startingColumn != rhs.startingColumn {return false}
    if lhs.endingColumn != rhs.endingColumn {return false}
    if lhs.characterRangeStart != rhs.characterRangeStart {return false}
    if lhs.characterRangeEnd != rhs.characterRangeEnd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Xcmetrics_NoteBuild: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NoteBuild"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "build_identifier"),
    2: .standard(proto: "parent_identifier"),
    3: .standard(proto: "parent_type"),
    5: .same(proto: "title"),
    6: .standard(proto: "document_url"),
    7: .same(proto: "severity"),
    8: .standard(proto: "starting_line"),
    9: .standard(proto: "ending_line"),
    10: .standard(proto: "starting_column"),
    11: .standard(proto: "ending_column"),
    12: .standard(proto: "character_range_start"),
    13: .standard(proto: "character_range_end"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.buildIdentifier)
      case 2: try decoder.decodeSingularStringField(value: &self.parentIdentifier)
      case 3: try decoder.decodeSingularStringField(value: &self.parentType)
      case 5: try decoder.decodeSingularStringField(value: &self.title)
      case 6: try decoder.decodeSingularStringField(value: &self.documentURL)
      case 7: try decoder.decodeSingularInt32Field(value: &self.severity)
      case 8: try decoder.decodeSingularInt32Field(value: &self.startingLine)
      case 9: try decoder.decodeSingularInt32Field(value: &self.endingLine)
      case 10: try decoder.decodeSingularInt32Field(value: &self.startingColumn)
      case 11: try decoder.decodeSingularInt32Field(value: &self.endingColumn)
      case 12: try decoder.decodeSingularInt32Field(value: &self.characterRangeStart)
      case 13: try decoder.decodeSingularInt32Field(value: &self.characterRangeEnd)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.buildIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.buildIdentifier, fieldNumber: 1)
    }
    if !self.parentIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.parentIdentifier, fieldNumber: 2)
    }
    if !self.parentType.isEmpty {
      try visitor.visitSingularStringField(value: self.parentType, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 5)
    }
    if !self.documentURL.isEmpty {
      try visitor.visitSingularStringField(value: self.documentURL, fieldNumber: 6)
    }
    if self.severity != 0 {
      try visitor.visitSingularInt32Field(value: self.severity, fieldNumber: 7)
    }
    if self.startingLine != 0 {
      try visitor.visitSingularInt32Field(value: self.startingLine, fieldNumber: 8)
    }
    if self.endingLine != 0 {
      try visitor.visitSingularInt32Field(value: self.endingLine, fieldNumber: 9)
    }
    if self.startingColumn != 0 {
      try visitor.visitSingularInt32Field(value: self.startingColumn, fieldNumber: 10)
    }
    if self.endingColumn != 0 {
      try visitor.visitSingularInt32Field(value: self.endingColumn, fieldNumber: 11)
    }
    if self.characterRangeStart != 0 {
      try visitor.visitSingularInt32Field(value: self.characterRangeStart, fieldNumber: 12)
    }
    if self.characterRangeEnd != 0 {
      try visitor.visitSingularInt32Field(value: self.characterRangeEnd, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_NoteBuild, rhs: Spotify_Xcmetrics_NoteBuild) -> Bool {
    if lhs.buildIdentifier != rhs.buildIdentifier {return false}
    if lhs.parentIdentifier != rhs.parentIdentifier {return false}
    if lhs.parentType != rhs.parentType {return false}
    if lhs.title != rhs.title {return false}
    if lhs.documentURL != rhs.documentURL {return false}
    if lhs.severity != rhs.severity {return false}
    if lhs.startingLine != rhs.startingLine {return false}
    if lhs.endingLine != rhs.endingLine {return false}
    if lhs.startingColumn != rhs.startingColumn {return false}
    if lhs.endingColumn != rhs.endingColumn {return false}
    if lhs.characterRangeStart != rhs.characterRangeStart {return false}
    if lhs.characterRangeEnd != rhs.characterRangeEnd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Xcmetrics_SwiftTypeCheckBuild: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SwiftTypeCheckBuild"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "build_identifier"),
    2: .standard(proto: "step_identifier"),
    3: .same(proto: "file"),
    5: .standard(proto: "starting_line"),
    6: .standard(proto: "starting_column"),
    7: .same(proto: "duration"),
    8: .same(proto: "occurrences"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.buildIdentifier)
      case 2: try decoder.decodeSingularStringField(value: &self.stepIdentifier)
      case 3: try decoder.decodeSingularStringField(value: &self.file)
      case 5: try decoder.decodeSingularInt32Field(value: &self.startingLine)
      case 6: try decoder.decodeSingularInt32Field(value: &self.startingColumn)
      case 7: try decoder.decodeSingularDoubleField(value: &self.duration)
      case 8: try decoder.decodeSingularInt32Field(value: &self.occurrences)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.buildIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.buildIdentifier, fieldNumber: 1)
    }
    if !self.stepIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.stepIdentifier, fieldNumber: 2)
    }
    if !self.file.isEmpty {
      try visitor.visitSingularStringField(value: self.file, fieldNumber: 3)
    }
    if self.startingLine != 0 {
      try visitor.visitSingularInt32Field(value: self.startingLine, fieldNumber: 5)
    }
    if self.startingColumn != 0 {
      try visitor.visitSingularInt32Field(value: self.startingColumn, fieldNumber: 6)
    }
    if self.duration != 0 {
      try visitor.visitSingularDoubleField(value: self.duration, fieldNumber: 7)
    }
    if self.occurrences != 0 {
      try visitor.visitSingularInt32Field(value: self.occurrences, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_SwiftTypeCheckBuild, rhs: Spotify_Xcmetrics_SwiftTypeCheckBuild) -> Bool {
    if lhs.buildIdentifier != rhs.buildIdentifier {return false}
    if lhs.stepIdentifier != rhs.stepIdentifier {return false}
    if lhs.file != rhs.file {return false}
    if lhs.startingLine != rhs.startingLine {return false}
    if lhs.startingColumn != rhs.startingColumn {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.occurrences != rhs.occurrences {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Xcmetrics_BuildHost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BuildHost"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "build_identifier"),
    2: .standard(proto: "host_os"),
    3: .standard(proto: "host_architecture"),
    4: .standard(proto: "host_model"),
    5: .standard(proto: "host_os_family"),
    6: .standard(proto: "host_os_version"),
    7: .standard(proto: "cpu_model"),
    8: .standard(proto: "cpu_count"),
    9: .standard(proto: "cpu_speed_ghz"),
    10: .standard(proto: "memory_total_mb"),
    11: .standard(proto: "memory_free_mb"),
    12: .standard(proto: "swap_total_mb"),
    13: .standard(proto: "swap_free_mb"),
    14: .standard(proto: "uptime_seconds"),
    15: .same(proto: "timezone"),
    16: .standard(proto: "is_virtual"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.buildIdentifier)
      case 2: try decoder.decodeSingularStringField(value: &self.hostOs)
      case 3: try decoder.decodeSingularStringField(value: &self.hostArchitecture)
      case 4: try decoder.decodeSingularStringField(value: &self.hostModel)
      case 5: try decoder.decodeSingularStringField(value: &self.hostOsFamily)
      case 6: try decoder.decodeSingularStringField(value: &self.hostOsVersion)
      case 7: try decoder.decodeSingularStringField(value: &self.cpuModel)
      case 8: try decoder.decodeSingularInt32Field(value: &self.cpuCount)
      case 9: try decoder.decodeSingularFloatField(value: &self.cpuSpeedGhz)
      case 10: try decoder.decodeSingularDoubleField(value: &self.memoryTotalMb)
      case 11: try decoder.decodeSingularDoubleField(value: &self.memoryFreeMb)
      case 12: try decoder.decodeSingularDoubleField(value: &self.swapTotalMb)
      case 13: try decoder.decodeSingularDoubleField(value: &self.swapFreeMb)
      case 14: try decoder.decodeSingularInt64Field(value: &self.uptimeSeconds)
      case 15: try decoder.decodeSingularStringField(value: &self.timezone)
      case 16: try decoder.decodeSingularBoolField(value: &self.isVirtual)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.buildIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.buildIdentifier, fieldNumber: 1)
    }
    if !self.hostOs.isEmpty {
      try visitor.visitSingularStringField(value: self.hostOs, fieldNumber: 2)
    }
    if !self.hostArchitecture.isEmpty {
      try visitor.visitSingularStringField(value: self.hostArchitecture, fieldNumber: 3)
    }
    if !self.hostModel.isEmpty {
      try visitor.visitSingularStringField(value: self.hostModel, fieldNumber: 4)
    }
    if !self.hostOsFamily.isEmpty {
      try visitor.visitSingularStringField(value: self.hostOsFamily, fieldNumber: 5)
    }
    if !self.hostOsVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.hostOsVersion, fieldNumber: 6)
    }
    if !self.cpuModel.isEmpty {
      try visitor.visitSingularStringField(value: self.cpuModel, fieldNumber: 7)
    }
    if self.cpuCount != 0 {
      try visitor.visitSingularInt32Field(value: self.cpuCount, fieldNumber: 8)
    }
    if self.cpuSpeedGhz != 0 {
      try visitor.visitSingularFloatField(value: self.cpuSpeedGhz, fieldNumber: 9)
    }
    if self.memoryTotalMb != 0 {
      try visitor.visitSingularDoubleField(value: self.memoryTotalMb, fieldNumber: 10)
    }
    if self.memoryFreeMb != 0 {
      try visitor.visitSingularDoubleField(value: self.memoryFreeMb, fieldNumber: 11)
    }
    if self.swapTotalMb != 0 {
      try visitor.visitSingularDoubleField(value: self.swapTotalMb, fieldNumber: 12)
    }
    if self.swapFreeMb != 0 {
      try visitor.visitSingularDoubleField(value: self.swapFreeMb, fieldNumber: 13)
    }
    if self.uptimeSeconds != 0 {
      try visitor.visitSingularInt64Field(value: self.uptimeSeconds, fieldNumber: 14)
    }
    if !self.timezone.isEmpty {
      try visitor.visitSingularStringField(value: self.timezone, fieldNumber: 15)
    }
    if self.isVirtual != false {
      try visitor.visitSingularBoolField(value: self.isVirtual, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_BuildHost, rhs: Spotify_Xcmetrics_BuildHost) -> Bool {
    if lhs.buildIdentifier != rhs.buildIdentifier {return false}
    if lhs.hostOs != rhs.hostOs {return false}
    if lhs.hostArchitecture != rhs.hostArchitecture {return false}
    if lhs.hostModel != rhs.hostModel {return false}
    if lhs.hostOsFamily != rhs.hostOsFamily {return false}
    if lhs.hostOsVersion != rhs.hostOsVersion {return false}
    if lhs.cpuModel != rhs.cpuModel {return false}
    if lhs.cpuCount != rhs.cpuCount {return false}
    if lhs.cpuSpeedGhz != rhs.cpuSpeedGhz {return false}
    if lhs.memoryTotalMb != rhs.memoryTotalMb {return false}
    if lhs.memoryFreeMb != rhs.memoryFreeMb {return false}
    if lhs.swapTotalMb != rhs.swapTotalMb {return false}
    if lhs.swapFreeMb != rhs.swapFreeMb {return false}
    if lhs.uptimeSeconds != rhs.uptimeSeconds {return false}
    if lhs.timezone != rhs.timezone {return false}
    if lhs.isVirtual != rhs.isVirtual {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Xcmetrics_XcodeVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".XcodeVersion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "build_identifier"),
    2: .same(proto: "version"),
    3: .standard(proto: "build_number"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.buildIdentifier)
      case 2: try decoder.decodeSingularStringField(value: &self.version)
      case 3: try decoder.decodeSingularStringField(value: &self.buildNumber)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.buildIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.buildIdentifier, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if !self.buildNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.buildNumber, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_XcodeVersion, rhs: Spotify_Xcmetrics_XcodeVersion) -> Bool {
    if lhs.buildIdentifier != rhs.buildIdentifier {return false}
    if lhs.version != rhs.version {return false}
    if lhs.buildNumber != rhs.buildNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Xcmetrics_BuildMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BuildMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "build_identifier"),
    2: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.buildIdentifier)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.metadata)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.buildIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.buildIdentifier, fieldNumber: 1)
    }
    if !self.metadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.metadata, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_BuildMetadata, rhs: Spotify_Xcmetrics_BuildMetadata) -> Bool {
    if lhs.buildIdentifier != rhs.buildIdentifier {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Xcmetrics_UploadBuildMetricsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UploadBuildMetricsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "build"),
    3: .same(proto: "targets"),
    4: .same(proto: "steps"),
    5: .same(proto: "functions"),
    6: .same(proto: "warnings"),
    7: .same(proto: "errors"),
    8: .same(proto: "notes"),
    9: .standard(proto: "type_checks"),
    10: .standard(proto: "build_host"),
    11: .standard(proto: "xcode_version"),
    12: .standard(proto: "build_metadata"),
  ]

  fileprivate class _StorageClass {
    var _version: Int32 = 0
    var _build: Spotify_Xcmetrics_Build? = nil
    var _targets: [Spotify_Xcmetrics_TargetBuild] = []
    var _steps: [Spotify_Xcmetrics_StepBuild] = []
    var _functions: [Spotify_Xcmetrics_FunctionBuild] = []
    var _warnings: [Spotify_Xcmetrics_WarningBuild] = []
    var _errors: [Spotify_Xcmetrics_ErrorBuild] = []
    var _notes: [Spotify_Xcmetrics_NoteBuild] = []
    var _typeChecks: [Spotify_Xcmetrics_SwiftTypeCheckBuild] = []
    var _buildHost: Spotify_Xcmetrics_BuildHost? = nil
    var _xcodeVersion: Spotify_Xcmetrics_XcodeVersion? = nil
    var _buildMetadata: Spotify_Xcmetrics_BuildMetadata? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _version = source._version
      _build = source._build
      _targets = source._targets
      _steps = source._steps
      _functions = source._functions
      _warnings = source._warnings
      _errors = source._errors
      _notes = source._notes
      _typeChecks = source._typeChecks
      _buildHost = source._buildHost
      _xcodeVersion = source._xcodeVersion
      _buildMetadata = source._buildMetadata
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._version)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._build)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._targets)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._steps)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._functions)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._warnings)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._errors)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._notes)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._typeChecks)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._buildHost)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._xcodeVersion)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._buildMetadata)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._version != 0 {
        try visitor.visitSingularInt32Field(value: _storage._version, fieldNumber: 1)
      }
      if let v = _storage._build {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._targets.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._targets, fieldNumber: 3)
      }
      if !_storage._steps.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._steps, fieldNumber: 4)
      }
      if !_storage._functions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._functions, fieldNumber: 5)
      }
      if !_storage._warnings.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._warnings, fieldNumber: 6)
      }
      if !_storage._errors.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._errors, fieldNumber: 7)
      }
      if !_storage._notes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._notes, fieldNumber: 8)
      }
      if !_storage._typeChecks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._typeChecks, fieldNumber: 9)
      }
      if let v = _storage._buildHost {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._xcodeVersion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._buildMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_UploadBuildMetricsRequest, rhs: Spotify_Xcmetrics_UploadBuildMetricsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._version != rhs_storage._version {return false}
        if _storage._build != rhs_storage._build {return false}
        if _storage._targets != rhs_storage._targets {return false}
        if _storage._steps != rhs_storage._steps {return false}
        if _storage._functions != rhs_storage._functions {return false}
        if _storage._warnings != rhs_storage._warnings {return false}
        if _storage._errors != rhs_storage._errors {return false}
        if _storage._notes != rhs_storage._notes {return false}
        if _storage._typeChecks != rhs_storage._typeChecks {return false}
        if _storage._buildHost != rhs_storage._buildHost {return false}
        if _storage._xcodeVersion != rhs_storage._xcodeVersion {return false}
        if _storage._buildMetadata != rhs_storage._buildMetadata {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Xcmetrics_UploadBuildMetricsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UploadBuildMetricsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Spotify_Xcmetrics_UploadBuildMetricsResponse, rhs: Spotify_Xcmetrics_UploadBuildMetricsResponse) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
